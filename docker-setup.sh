#!/bin/bash

# Docker Setup Script for Waste2Product
# This script automates the initial Docker setup

set -e

echo "üê≥ Waste2Product Docker Setup"
echo "================================"
echo ""

# Check if Docker is running
echo "Checking if Docker is running..."
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running. Please start Docker first."
    exit 1
fi
echo "‚úÖ Docker is running"
echo ""

# Step 1: Prepare .env file
echo "Step 1: Preparing environment file..."
if [ -f ".env" ]; then
    echo "‚ö†Ô∏è  .env file already exists."
    read -p "Do you want to backup and replace it with .env.docker? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cp .env .env.backup
        echo "‚úÖ Backed up existing .env to .env.backup"
        cp .env.docker .env
        echo "‚úÖ Created new .env from .env.docker"
    fi
else
    cp .env.docker .env
    echo "‚úÖ Created .env file"
fi
echo ""

# Step 2: Build and start containers
echo "Step 2: Building and starting Docker containers..."
echo "‚è≥ This may take 5-10 minutes on first run..."
docker-compose up -d --build
echo "‚úÖ Containers started successfully"
echo ""

# Step 3: Wait for MySQL to be ready
echo "Step 3: Waiting for MySQL to be ready..."
for i in {1..30}; do
    if docker-compose exec -T mysql mysqladmin ping -h localhost -u root -psecret > /dev/null 2>&1; then
        echo "‚úÖ MySQL is ready"
        break
    fi
    echo "Attempt $i/30... ‚è≥"
    sleep 2
done
echo ""

# Step 4: Install Composer dependencies
echo "Step 4: Installing Composer dependencies..."
docker-compose exec -T app composer install --optimize-autoloader || echo "‚ö†Ô∏è  Warning: Composer install had issues"
echo "‚úÖ Composer dependencies installed"
echo ""

# Step 5: Generate application key
echo "Step 5: Generating application key..."
docker-compose exec -T app php artisan key:generate --force
echo "‚úÖ Application key generated"
echo ""

# Step 6: Run migrations
echo "Step 6: Running database migrations..."
read -p "Do you want to run migrations now? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    docker-compose exec -T app php artisan migrate --force
    echo "‚úÖ Migrations completed"
else
    echo "‚è≠Ô∏è  Skipped migrations"
fi
echo ""

# Step 7: Create storage link
echo "Step 7: Creating storage link..."
docker-compose exec -T app php artisan storage:link
echo "‚úÖ Storage link created"
echo ""

# Step 8: Clear caches
echo "Step 8: Clearing caches..."
docker-compose exec -T app php artisan cache:clear
docker-compose exec -T app php artisan config:clear
docker-compose exec -T app php artisan route:clear
docker-compose exec -T app php artisan view:clear
echo "‚úÖ Caches cleared"
echo ""

# Summary
echo "================================"
echo "üéâ Setup Complete!"
echo "================================"
echo ""
echo "Your application is now running at:"
echo "  üåê Main App:    http://localhost:8000"
echo "  üóÑÔ∏è  phpMyAdmin: http://localhost:8080"
echo ""
echo "Database credentials:"
echo "  Host:     mysql (or localhost:3307 from host)"
echo "  Database: waste2"
echo "  Username: root"
echo "  Password: secret"
echo ""
echo "Useful commands:"
echo "  View logs:        docker-compose logs -f"
echo "  Stop containers:  docker-compose stop"
echo "  Start containers: docker-compose start"
echo "  Restart:          docker-compose restart"
echo "  Shell access:     docker-compose exec app sh"
echo ""
echo "For more information, see DOCKER_README.md"
echo ""
echo "Happy coding! üöÄ"
